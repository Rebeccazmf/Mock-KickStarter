package neu.edu.entity;
// default package
// Generated Dec 7, 2017 12:18:31 AM by Hibernate Tools 5.2.3.Final

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable/*, UserDetails */{

	private Integer userId;
	private Role role;
	private String yourName;
	private String userDesc;
	private String username;
	private String password;
	private String userStatus;
	private Set<Payinfo> payinfos = new HashSet<Payinfo>(0);
	private Set<Idea> ideas = new HashSet<Idea>(0);
	private Set<ShoppingCart> shoppingCarts = new HashSet<ShoppingCart>(0);
	private Set<Startup> startups = new HashSet<Startup>(0);
	private Set<Purchase> purchases = new HashSet<Purchase>(0);

	private boolean accountNonExpired;
	private boolean accountNonLocked;
	private boolean credentialsNonExpired;
	private boolean enabled;
	
	public User() {
	}

	public User(Role role, String yourName, String username, String password, String userStatus) {
		this.role = role;
		this.yourName = yourName;
		this.username = username;
		this.password = password;
		this.userStatus = userStatus;
	}

	public User(Role role, String yourName, String userDesc, String username, String password, String userStatus,
			Set<Payinfo> payinfos, Set<Idea> ideas, Set<ShoppingCart> shoppingCarts, Set<Startup> startups,
			Set<Purchase> purchases) {
		this.role = role;
		this.yourName = yourName;
		this.userDesc = userDesc;
		this.username = username;
		this.password = password;
		this.userStatus = userStatus;
		this.payinfos = payinfos;
		this.ideas = ideas;
		this.shoppingCarts = shoppingCarts;
		this.startups = startups;
		this.purchases = purchases;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "your_name", nullable = false, length = 20)
	public String getYourName() {
		return this.yourName;
	}

	public void setYourName(String yourName) {
		this.yourName = yourName;
	}

	@Column(name = "user_desc", length = 100)
	public String getUserDesc() {
		return this.userDesc;
	}

	public void setUserDesc(String userDesc) {
		this.userDesc = userDesc;
	}

	@Column(name = "username", unique = true, nullable = false, length = 50)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 500)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "user_status", nullable = false, length = 20)
	public String getUserStatus() {
		return this.userStatus;
	}

	public void setUserStatus(String userStatus) {
		this.userStatus = userStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Payinfo> getPayinfos() {
		return this.payinfos;
	}

	public void setPayinfos(Set<Payinfo> payinfos) {
		this.payinfos = payinfos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Idea> getIdeas() {
		return this.ideas;
	}

	public void setIdeas(Set<Idea> ideas) {
		this.ideas = ideas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<ShoppingCart> getShoppingCarts() {
		return this.shoppingCarts;
	}

	public void setShoppingCarts(Set<ShoppingCart> shoppingCarts) {
		this.shoppingCarts = shoppingCarts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Startup> getStartups() {
		return this.startups;
	}

	public void setStartups(Set<Startup> startups) {
		this.startups = startups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Purchase> getPurchases() {
		return this.purchases;
	}

	public void setPurchases(Set<Purchase> purchases) {
		this.purchases = purchases;
	}

/*	@Transient
	@Override
	 public boolean isAccountNonExpired() {

	 return accountNonExpired;

	 }

	@Transient
	 @Override
	 public boolean isAccountNonLocked() {

	 return accountNonLocked;

	 }

	@Transient
	 @Override
	 public boolean isCredentialsNonExpired() {

	 return credentialsNonExpired;

	 }

	@Transient
	 @Override
	 public boolean isEnabled() {

	 return enabled;

	 }



	 public void setAccountNonExpired(boolean accountNonExpired) {

	this.accountNonExpired = accountNonExpired;

	}

	 public void setAccountNonLocked(boolean accountNonLocked) {

	this.accountNonLocked = accountNonLocked;

	}

	 public void setCredentialsNonExpired(boolean credentialsNonExpired) {

	this.credentialsNonExpired = credentialsNonExpired;

	}


	 public void setEnabled(boolean enabled) {

	this.enabled = enabled;

	}



	 @Override
	@Transient
	 public List<GrantedAuthority> getAuthorities(){

	 List<GrantedAuthority> authorities = new ArrayList<>();

	 return authorities;

	 }*/
}
